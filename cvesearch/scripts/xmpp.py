#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Simple XMPP bot to query for the last entries in the CVE database
#
# current commands supported are:
#
# last <max>
# cvetweet <max>
# browse
# search <vendor>\<product>
# get <cve>
#
# You need to add the XMPP bot in your roster if you want to communicate
# with it.
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2012-2019  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2015-2019  Pieter-Jan Moreels - pieter-jan@pidgey.net

# Imports
import click
import getpass
import json
import logging
import sleekxmpp

# BSON MongoDB include ugly stuff that needs to be processed for standard JSON
from bson import json_util

from . import _search
from ..api import API

rankinglookup = True

helpmessage  = "last [<n>]                - last n cve entries (default: 10) (output: JSON)\n"
helpmessage += "get <cve-id>              - get cve info (output: JSON)\n"
helpmessage += "browse                    - list of vendors (output: JSON)\n"
helpmessage += "browse <vendor>           - list of products of vendor (output: JSON)\n"
helpmessage += "search <vendor> <product> - list of cves for product (output: JSON)\n"
helpmessage += "cvetweet <n>              - summary of <n> last cve entries (output: Text)\n"
helpmessage += "cvetweet <cve-id>         - summary of cve <cve-id> (output: Text) \n\n"
helpmessage += "For more info about cve-search: http://adulau.github.com/cve-search/"

api = API()

def cvesearch(query="last", option=None, **kwargs):

    def last(option):
        try:
            limit = int(option) if option else 10
        except:
            return "Please specify the number of CVEs"
        max_elements = kwargs.get('max_elements')
        if limit > max_elements or limit < 1:
            return "Request not in range 0-%d" % max_elements
        return api.api_last(limit)

    def cve(option):
        if option is None:
            return "A cve-id must be specified"
        return api.api_cve(option)


    if query in ["last", "recent"]:
        return last(option)
    elif query in ["get", "cve"]:
        return cve(option)
    elif query in ["browse", "vendor"]:
        return api.api_browse(option)
    elif query in ["search", "product"]:
        parts = option.split()
        if len(parts) < 2:
            return "Usage: search <vendor> <product>"
        return api.api_search(parts[0], parts[1])
    elif query in ["cvetweet", "tweet"]:
        text = ""
        cves = []
        if option.lower().startswith("cve-"):
            cves.append(cve(option))
        else:
            cves = last(option)
        for t in cves:
            text += str(t['id']) + " , " + str(t['summary']) + " " + " , ".join(t['references']) + "\n"
        return text
    else:
        return helpmessage


class CVEBot(sleekxmpp.ClientXMPP):

    def __init__(self, jid, password, **kwargs):
        self.v4 = kwargs.get('v4')
        self.name = kwargs.get('name')
        self.max_elements = kwargs.get('max_elements')
        super().__init__(self, jid, password, **kwargs)
        if self.v4 is False:
            self.use_ipv6 = True
        else:
            self.use_ipv6 = False
        self.add_event_handler("session_start", self.start)
        self.add_event_handler("message", self.message)
        self.add_event_handler("ssl_invalid_cert", self.ssl_invalid_cert)

    def format_message(self, message):
        if isinstance(message, (dict, list)):
            message = json.dumps(message, sort_keys=True, indent=4, default=json_util.default)
        else:
            message = str(message)
        return message

    def ssl_invalid_cert(self, cert):
        return

    def start(self, event):
        self.send_presence()
        self.get_roster()

    def message(self, msg):
        if msg['type'] in ('chat', 'normal'):
            q = (msg['body']).split(' ', 1)
            option = q[1] if len(q) == 2 else None

            reply = cvesearch(query=q[0], option=option, max_elements=self.max_elements)
            msg.reply(self.format_message(reply)).send()


@_search.command()
@click.pass_context
@_search.option('-q', '--quiet', type=click.BOOL)
@_search.option('-d', '--debug', type=click.BOOL)
@_search.option('-v', '--verbose', type=click.BOOL)
@_search.option('-n', '--cpenamelookup', type=click.BOOL)
@_search.argument('-j', '--jid', type=click.STRING)
@_search.option('-m', '--max', type=click.INT, default=20)
@_search.option('-4', '--ipv4', type=click.BOOL)
@_search.argument('-p', '--password', type=click.STRING)
def search_xmpp(quiet, dbg, verbose, name, jid, max_elements, v4, password):
    """CVE-Search Jabber implementation.

    :param quiet: set logging to ERROR
    :param dbg: set logging to DEBUG
    :param verbose: set logging to COMM
    :param name: CPE name lookup
    :param jid: JabberID to use
    :param max_elements: maximum elements to return (default: 20)
    :param password: password
    :return:
    """
    if quiet:
        logging.basicConfig(level=logging.ERROR, format='%(levelname)-8s %(message)s')
    elif dbg:
        logging.basicConfig(level=logging.DEBUG, format='%(levelname)-8s %(message)s')
    elif verbose:
        logging.basicConfig(level=logging.INFO, format='%(levelname)-8s %(message)s')

    # Basic skeleton based on CVEBot from sleekxmpp library
    xmpp = CVEBot(jid, password, v4=v4, name=name, max_elements=max_elements)
    xmpp.register_plugin('xep_0030')  # Service Discovery
    xmpp.register_plugin('xep_0004')  # Data Forms
    xmpp.register_plugin('xep_0060')  # PubSub
    xmpp.register_plugin('xep_0199')  # XMPP Ping

    if xmpp.connect():
        xmpp.process(block=True)
        _search.echo("Done")
    else:
        _search.echo("Unable to connect.")


if __name__ == '__main__':
    search_xmpp(input)