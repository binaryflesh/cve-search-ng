#!/usr/bin/env python3
#
# search is the search component of cve-search querying the database
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2012-2015  Wim Remes
# Copyright (c) 2012-2019  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2015-2019  Pieter-Jan Moreels - pieter-jan@pidgey.net

# Imports
import click
from .. import DatabaseLayer, Query, output
from . import _search


@_search.command()
@click.pass_context
@_search.option('-p', '--product', type=click.STRING)
# @click.argument('-f', '--fulltext', help='full text search in cve summary')
@_search.argument('-c', '--cve', type=click.STRING, multi=True)
@_search.option('-o', '--output', type=click.STRING, choices=['csv', 'html', 'json', 'xml', 'cveid', 'asciidoc'])
# @click.argument('-l', '--descending', is_flag=True, help='sort in descending mode')
@_search.option('-n', '--cpe', type=click.BOOL)
@_search.option('-r', '--ranking', type=click.BOOL)
@_search.option('-a', '--capec', type=click.BOOL)
# @click.argument('-v', '--vendor', help='vendor name to lookup in reference urls')
@_search.option('--api', type=click.STRING)
def search(product, cve, frmt, cpe, rank, capec, api):
    """Search for vulnerabilities in the Nat'l Vulnerability Database(https://nvd.nist.gov)

    :param product: search product, e.g. o:microsoft:windows_7
    :type product: str
    :param cve: search for one or more cve
    :type cve: str or list[str]
    :param frmt: output format. supported options: csv, html, json, xml, cveid, asciidoc
    :type frmt: str
    :param cpe: lookup complete CPE name for vulnerable configuration
    :type cpe: bool
    :param rank: lookup ranking of vulnerable configuration
    :type rank: bool
    :param capec: lookup capec for related cwes
    :type capec: bool
    :param api: cve-search instance to query
    :type api: str
    :return: formatted output
    """

    db = DatabaseLayer()
    query = Query(api=api)
    items = []
    kwargs = {
        'namelookup': cpe,
        'ranking':    rank,
        'capec':      capec,
        'product':    product,   # only used by html, otherwise ignored
        'cveids':     cve
    }  # only used by html, otherwise ignored

    # Fetch cves
    if product:
        items.extend(query.cveforcpe(product))
    if frmt:
        items.extend(query.search(frmt))
    if cve:
        for c in cve:
            items.append(query.cve(c))
    # Fetch extra info if needed
    for item in items:
        ranking = []
        for conf in item.vulnerable_configuration:
            if rank:  # Ranking lookup
                ranking = db.CPE.ranking(cpeid=conf)
                if rank and rank not in ranking:
                    ranking.append(rank)
        if rank:  # Ranking lookup
            item['ranking'] = ranking

    # Print output
    return _search.echo(output(items, frmt, **kwargs))


if __name__ == '__main__':
    search(input)
