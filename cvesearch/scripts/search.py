#!/usr/bin/env python3
#
# search is the search component of cve-search querying the database
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2012-2015  Wim Remes
# Copyright (c) 2012-2019  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2015-2019  Pieter-Jan Moreels - pieter-jan@pidgey.net

# Imports
import click
from cvesearch import DatabaseLayer, Query, output


@click.command()
@click.option('-p', '--product', help='search product, e.g. o:microsoft:windows_7')
# @click.argument('-f', '--fulltext', help='full text search in cve summary')
@click.argument('-c', '--cve', multi=True, help='search for one or more CVE')
@click.option('-o', '--output', choices=['csv', 'html', 'json', 'xml', 'cveid', 'asciidoc'], help='output format')
# @click.argument('-l', '--descending', is_flag=True, help='sort in descending mode')
@click.option('-n', '--cpe', is_flag=True, help='lookup complete CPE name for vulnerable configuration')
@click.option('-r', '--ranking', is_flag=True, help='lookup ranking of vulnerable configuration')
@click.option('-a', '--capec', is_flag=True, help='lookup capec for related cwes')
# @click.argument('-v', '--vendor', help='vendor name to lookup in reference urls')
@click.option('--api', help='cve-search instance to query')
def search(product, cve, frmt, cpe, rank, capec, api):
    """Search for vulnerabilities in the Nat'l Vulnerability Database(https://nvd.nist.gov)"""

    db    = DatabaseLayer()
    query = Query(api=api)
    items = []
    kwargs  = {'namelookup': cpe,
               'ranking':    rank,
               'capec':      capec,
               'product':    product, # only used by html, otherwise ignored
               'cveids':     cve }# only used by html, otherwise ignored

    # Fetch cves
    if product:
        items.extend(query.cveforcpe(product))
    if frmt:
        items.extend(query.search(frmt))
    if cve:
        for c in cve:
            items.append(query.cve(c))
    # Fetch extra info if needed
    for item in items:
        ranking = []
        for conf in item.vulnerable_configuration:
            if rank: # Ranking lookup
                ranking = db.CPE.ranking(cpeid=conf)
                if rank and rank not in ranking:
                    ranking.append(rank)
        if rank: # Ranking lookup
            item['ranking'] = ranking

    # Print output
    click.echo(output(items, frmt, **kwargs))


if __name__ == '__main__':
    click.command(search)
