#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Admin creator script
#
# Creates an admin account in the database
# Only master accounts are allowed to add and remove users
# First account registered is the master account
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2015-2019  Pieter-Jan Moreels - pieter-jan@pidgey.net

# Imports
import sys
from pymongo.errors import ConnectionFailure
import getpass
import click

from .. import DatabaseLayer
from . import _manage


class _Manage:
    db = DatabaseLayer()
    col = 'mgmt_users'
    exits = {
            'userInDb': 'User already exists in database',
            'userNotInDb': 'User does not exist in database',
            'userpasscombo': 'Master user/password combination does not exist',
            'passwordMatch': "The passwords don't match!",
            'noMaster': 'Not a master account!',
            'lastMaster': 'This user is the last admin in the database and thus can not be removed',
            'dummy': '_dummy_ is a placeholder, and thus cannot be used'
    }

    @classmethod
    def verifyPass(cls, password, user):
        if not cls.db.Users.exists(user):
            sys.exit(cls.exits['userNotInDb'])
        if not cls.db.Users.verifyPassword(user, password):
            sys.exit(cls.exits['userpasscombo'])
        return True

    @classmethod
    def promptNewPass(cls):
        password = getpass.getpass("New password:")
        verify = getpass.getpass("Verify password:")
        if (password != verify):
            sys.exit(cls.exits['passwordMatch'])
        return password

    @classmethod
    def masterLogin(cls):
        master = input("Master account username: ")
        if cls.verifyPass(getpass.getpass("Master password:"), master):
            if not cls.db.Users.isAdmin(master):
                sys.exit(cls.exits['noMaster'])
        else:
            sys.exit('Master user/password combination does not exist')
        return True

    @classmethod
    def isLastAdmin(cls, user):
        if cls.db.Users.isOnlyMaster(user):
            sys.exit(cls.exits['lastMaster'])


    @classmethod
    def admin(cls, **kwargs):
        useradd = kwargs.get('useradd')
        userlocal = kwargs.get('userlocal')
        chpw = kwargs.get('chpw')
        rm = kwargs.get('rm')
        escalate = kwargs.get('escalate')
        demote = kwargs.get('demote')
        if useradd:
            username = useradd
            if username.strip() == "_dummy_":
                sys.exit(cls.exits['dummy'])
            if cls.db.Users.exists(username):
                sys.exit(cls.exits['userInDb'])
            # set master if db is empty
            if cls.db.Users.size() > 0:
                cls.masterLogin()
                password = cls.promptNewPass()
                cls.db.Users.insert(username, password, localOnly=userlocal)
            else:
                password = cls.promptNewPass()
                cls.db.Users.insert(username, password, admin=True, localOnly=args.l)
            sys.exit("User added")
        elif chpw:
            username = chpw
            cls.verifyPass(getpass.getpass("Old password:"), username)
            password = cls.promptNewPass()
            cls.db.Users.changePassword(username, password)
            sys.exit("Password updated")
        elif rm:
            username = rm
            if not cls.db.Users.exists(username):
                sys.exit(cls.exits['userNotInDb'])
            cls.masterLogin()
            cls.isLastAdmin(username)
            cls.db.Users.remove(username)
            sys.exit('User removed from database')
        elif escalate:
            username = escalate
            if not cls.db.Users.exists(username):
                sys.exit(cls.exits['userNotInDb'])
            cls.masterLogin()
            # promote
            cls.db.Users.setAdmin(username, True)
            sys.exit('User promoted')
        elif demote:
            username = demote
            if not cls.db.Users.exists(username):
                sys.exit(cls.exits['userNotInDb'])
            cls.masterLogin()
            cls.isLastAdmin(username)
            # demote
            cls.db.Users.setAdmin(username, False)
            sys.exit('User demoted')


@_manage.command()
@click.pass_context
@_manage.argument('-a', '--add', defaultvalue=False)
@_manage.argument('-c', '--change', defaultvalue=False)
@_manage.argument('-r', '--remove', defaultvalue=False)
@_manage.argument('-p', '--promote', defaultvalue=False)
@_manage.argument('-d', '--demote', defaultvalue=False)
@_manage.option('-l', '--local', type=click.BOOL)
def manage_admin(useradd, chpw, rm, escalate, demote, userlocal):
    """Admin account creator for the mongo database

    :param useradd: Add an account
    :param chpw: change the password of an account
    :param rm: remove account
    :param escalate: promote account to master
    :param demote: demote account to normal user
    :param userlocal: make the user local-only
    :return:
    """
    try:
        return _Manage.admin(useradd=useradd, chpw=chpw, rm=rm, escalate=escalate, demote=demote, userlocal=userlocal)
    except ConnectionFailure:
        _manage.echo("Can't connect to the mongo database")
    except Exception as e:
        _manage.echo(e)
        _manage.echo("Outdated database. Please drop and re-fill your database")
