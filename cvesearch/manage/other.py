#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Import script of cpe (Common Platform Enumeration) definition
# into a collection used for human readable lookup of product name.
# This is locating the cpe used inside the cve, but only the cpe
# not present inside the cpe official dictionary.
#
# Example:
#    CVE-2014-5446 -> cpe:/a:zohocorp:manageengine_netflow_analyzer:.*
#    but 'cpe:/a:zohocorp:manageengine_netflow_analyzer' is not in the
#    cpe official dictionary.
#
# Imported in cvedb in the collection named cpeother.
#
# The format of the collection is the following
#
# { "_id" : ObjectId("50a2739eae24ac2274eae7c0"),
#     "id" : "cpe:/a:zohocorp:manageengine_netflow_analyzer:10.2",
#      "title" : "cpe:/a:zohocorp:manageengine_netflow_analyzer:10.2"
# }
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2014       psychedelys
# Copyright (c) 2014-2019  Pieter-Jan Moreels - pieter-jan@pidgey.net

# Imports
import sys
import click

from .. import DatabaseLayer, CPE, progressbar
from . import _manage


@_manage.command()
@click.pass_context
def manage_other():
    """Manage other cpe database

    :return:
    """
    db = DatabaseLayer()
    # get dates
    icve = db.CVE.updated()
    icpeo, indexed = db.CPE.alternative_updated()

    if not indexed:
        indexed = 0

    if icve and icpeo:
        if icpeo == icve:
            _manage.echo("Not modified")
            sys.exit(0)

    cves = db.CVE.query(skip=indexed, sort=("Published", "asc"))

    if not cves:
        _manage.echo("Empty collections, import skipped")
        sys.exit(2)

    unique = set()
    for cve in progressbar(cves):
        for cpe in cve.vulnerable_configuration:
            unique.add(cpe.id)
    indexed_cpe = set()
    for cpe in unique:
        if db.CPE.get(cpe):
            unique.add(cpe)
    for cpe in indexed_cpe:
        unique.remove(cpe)
    if len(unique) > 0:
        db.CPE.alternative_upsert([CPE(x) for x in unique])

    # update database info after successful program-run
    db.CVE.updated(icve)
    db.CPE.alternative_updated(icve, (indexed+len(cves)))


if __name__ == '__main__':
    manage_other(input)
