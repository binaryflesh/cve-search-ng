"""Import of the VIA4 dataset (vFeed replacement)"""
# Software is free software released under the "GNU Affero General Public License v3.0"
# Copyright (c) 2015-2019  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2016-2019  Pieter-Jan Moreels - pieter-jan@pidgey.net

import json
import sys
import click

from dateutil.parser import parse as parse_datetime

from .. import Configuration, DatabaseLayer, VIA4
from . import _manage

# ToDo: Implement REDIS


@_manage.command()
@click.pass_context
def manage_ref():
    """Manage ref

    :return:
    """
    try:
        redis = Configuration.getRedisRefConnection()
        try:
            redis.info()
        except ConnectionError:
            _manage.echo('Redis server not running on',
                         f'{Configuration.getRedisHost()}:{Configuration.getRedisPort()}')
            sys.exit(-1)
    except (IOError, EnvironmentError) as e:
        _manage.echo(e)
        sys.exit(1)

    try:
        (f, r) = Configuration.getFeedData('via4')
    except (IOError, ConnectionError):
        _manage.echo(f'Cannot open url {Configuration.getFeedURL("via4")}.',
                     'Bad URL or not connected to the internet?')
        sys.exit(-1)

    db = DatabaseLayer()

    # check modification date

    lastmodified = parse_datetime(r.headers['last-modified'], ignoretz=True)
    i = db.VIA4.updated()
    if i is not None:
        if lastmodified == i:
            _manage.echo("Not modified")
            sys.exit(0)

    data = json.loads(f.read().decode('utf-8'))
    cves = data['cves']
    bulk = [VIA4.fromDict(dict(val, id=key)) for key, val in cves.items() if key]
    db.VIA4.upsert(bulk)
    db.VIA4.sources(data['metadata']['sources'])
    db.VIA4.searchables(data['metadata']['searchables'])

    # update database info after successful program-run

    db.VIA4.updated(lastmodified)


if __name__ == '__main__':
    manage_ref(input)

